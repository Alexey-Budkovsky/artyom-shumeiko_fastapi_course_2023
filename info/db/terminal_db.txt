# ================================================= initialisation
-- переход в папку `app`
cd app

-- создание файла `alembic.ini`
-- создание папки `migrations` с содержимым
alembic init migrations
# ================================================= migration
-- переход в корневую папку проекта
cd ..

-- создание миграции
alembic revision --autogenerate -m "Initial migration"

"""
    ## Команда Alembic `alembic revision --autogenerate -m "Initial migration"`

**Что делает эта команда:**

Эта команда используется в рамках фреймворка Alembic для создания новой миграции базы данных. Alembic - это инструмент для управления версиями базы данных в Python проектах, особенно в тех, которые используют SQLAlchemy.

**Разберем команду по частям:**

* **`alembic revision`:** Эта часть команды запускает процесс создания новой миграции.
* **`--autogenerate`:** Этот флаг указывает Alembic автоматически сгенерировать скрипт миграции на основе текущего состояния модели данных в вашем проекте. Alembic сравнит текущее состояние модели с последней миграцией и создаст скрипт, содержащий инструкции SQL для внесения необходимых изменений в базу данных.
* **`-m "Initial migration"`:** Этот флаг задает сообщение для новой миграции. Оно будет использовано для идентификации миграции и сохранится в файле миграции. В данном случае сообщение "Initial migration" указывает на то, что это первая миграция для проекта.

**Как работает:**

1. **Сравнение моделей:** Alembic сравнивает текущее определение моделей в вашем проекте с последней миграцией. Это обычно делается путем анализа метаданных, связанных с моделями SQLAlchemy.
2. **Генерация скрипта:** На основе обнаруженных различий Alembic генерирует скрипт SQL, который содержит инструкции для создания новых таблиц, добавления столбцов, изменения типов данных и т.д.
3. **Создание файла миграции:** Сгенерированный скрипт SQL сохраняется в новом файле миграции в специальном каталоге. Имя файла обычно соответствует шаблону, который включает в себя метку времени и сообщение миграции.

**Зачем нужна эта команда:**

* **Управление версиями базы данных:** Alembic позволяет отслеживать изменения в структуре базы данных и применять их в разных средах (разработка, тестирование, продакшн).
* **Коллективное развитие:** Несколько разработчиков могут работать над одной базой данных, а Alembic помогает синхронизировать изменения.
* **Безопасность изменений:** Миграции позволяют безопасно применять изменения в базе данных, минимизируя риск ошибок.

**Пример использования:**

Представьте, что у вас есть модель SQLAlchemy, представляющая таблицу пользователей. Вы добавили новое поле "email" в эту модель. Чтобы отразить это изменение в базе данных, вы можете выполнить команду:

```bash
alembic revision --autogenerate -m "Add email column to users table"
```

Alembic автоматически сгенерирует миграцию, которая добавит столбец "email" в таблицу пользователей.

**Дополнительные замечания:**

* **Настройка Alembic:** Перед использованием Alembic необходимо выполнить его настройку в вашем проекте. Обычно это включает в себя создание конфигурационного файла и определение моделей SQLAlchemy.
* **Ручное редактирование миграций:** Хотя Alembic может автоматически генерировать миграции, иногда может потребоваться ручное редактирование скрипта миграции для более тонкой настройки.
* **Применение миграций:** После создания миграции ее необходимо применить к базе данных с помощью команды `alembic upgrade head`.

**Вывод:**

Команда `alembic revision --autogenerate -m "Initial migration"` является мощным инструментом для автоматического создания миграций базы данных в проектах на Python с использованием SQLAlchemy. Она позволяет эффективно управлять изменениями в структуре базы данных и обеспечивает надежность и безопасность при работе с базами данных.
"""

# ================================================= sending to database

-- прогон конкретной миграции
alembic upgrade 4f8376af1811

-- прогон всех миграций
alembic upgrade head

-- откатится назад на одну миграцию
alembic downgrade -1
